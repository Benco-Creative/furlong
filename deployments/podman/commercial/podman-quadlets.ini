# admin.container
[Unit]
Requires=api.service web.service
After=api.service web.service

[Container]
Image=artifacts.plane.so/makeplane/admin-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw

[Service]
Restart=always

---

# web.container
[Unit]
Requires=api.service worker.service
After=api.service worker.service

[Container]
Image=artifacts.plane.so/makeplane/web-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw

[Service]
Restart=always

---

# space.container
[Unit]
Requires=api.service web.service
After=api.service web.service

[Container]
Image=artifacts.plane.so/makeplane/space-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw

[Service]
Restart=always

---

# live.container
[Unit]
Requires=api.service web.service
After=api.service web.service

[Container]
EnvironmentFile=/opt/plane/plane.env
Image=artifacts.plane.so/makeplane/live-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw

[Service]
Restart=always

---

# monitor.container
[Container]
Environment=DEPLOY_PLATFORM=docker_compose PRIME_HOST=https://prime.plane.so
EnvironmentFile=/opt/plane/plane.env
Image=artifacts.plane.so/makeplane/monitor-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw
Volume=/opt/plane/data/monitor:/app

[Service]
Restart=always

---

# api.container
[Unit]
Requires=plane-db.service plane-redis.service
After=plane-db.service plane-redis.service

[Container]
Environment=DEPLOY_PLATFORM=docker_compose PRIME_HOST=https://prime.plane.so
EnvironmentFile=/opt/plane/plane.env
Exec=./bin/docker-entrypoint-api-ee.sh
Image=artifacts.plane.so/makeplane/backend-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw
Volume=/opt/plane/logs/api:/code/plane/logs

[Service]
Restart=always

---

# worker.container
[Unit]
Requires=api.service plane-db.service plane-redis.service
After=api.service plane-db.service plane-redis.service

[Container]
Environment=DEPLOY_PLATFORM=docker_compose PRIME_HOST=https://prime.plane.so
EnvironmentFile=/opt/plane/plane.env
Exec=./bin/docker-entrypoint-worker.sh
Image=artifacts.plane.so/makeplane/backend-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw
Volume=/opt/plane/logs/worker:/code/plane/logs

[Service]
Restart=always

---

# beat-worker.container
[Unit]
Requires=api.service plane-db.service plane-redis.service
After=api.service plane-db.service plane-redis.service

[Container]
Environment=DEPLOY_PLATFORM=docker_compose PRIME_HOST=https://prime.plane.so
EnvironmentFile=/opt/plane/plane.env
Exec=./bin/docker-entrypoint-beat.sh
Image=artifacts.plane.so/makeplane/backend-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw
Volume=/opt/plane/logs/beat_worker:/code/plane/logs

[Service]
Restart=always

---

# migrator.container
[Unit]
Requires=plane-db.service plane-redis.service
After=plane-db.service plane-redis.service

[Container]
Environment=DEPLOY_PLATFORM=docker_compose PRIME_HOST=https://prime.plane.so
EnvironmentFile=/opt/plane/plane.env
Exec=./bin/docker-entrypoint-migrator.sh
Image=artifacts.plane.so/makeplane/backend-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw
Volume=/opt/plane/logs/migrator:/code/plane/logs

[Service]
Restart=no

---

# plane-db.container
[Container]
EnvironmentFile=/opt/plane/plane.env
Exec=postgres -c 'max_connections=1000'
Image=postgres:15.7-alpine
Network=systemd-plane-nw
Volume=/opt/plane/data/postgres:/var/lib/postgresql/data

[Service]
Restart=always

---

# plane-redis.container
[Container]
EnvironmentFile=/opt/plane/plane.env
Image=valkey/valkey:7.2.5-alpine
Network=systemd-plane-nw
Volume=/opt/plane/data/redis:/data

[Service]
Restart=always

---

# plane-mq.container
[Container]
EnvironmentFile=/opt/plane/plane.env
Image=rabbitmq:3.13.6-management-alpine
Network=systemd-plane-nw
Volume=/opt/plane/data/rabbitmq:/var/lib/rabbitmq

[Service]
Restart=always

---

# plane-minio.container
[Container]
EnvironmentFile=/opt/plane/plane.env
Exec=server /export --console-address :9090
Image=minio/minio:latest
Network=systemd-plane-nw
Volume=/opt/plane/data/minio:/export

[Service]
Restart=always

---

# iframely.container
[Container]
EnvironmentFile=/opt/plane/plane.env
Image=artifacts.plane.so/makeplane/iframely:v1.2.0
Network=systemd-plane-nw

[Service]
Restart=always

---

# silo.container
[Unit]
Requires=plane-redis.service plane-mq.service
After=plane-redis.service plane-mq.service

[Container]
EnvironmentFile=/opt/plane/plane.env
Image=artifacts.plane.so/makeplane/silo-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw

[Service]
Restart=always

---

# automation-consumer.container
[Unit]
Requires=plane-db.service plane-mq.service
After=plane-db.service plane-mq.service

[Container]
EnvironmentFile=/opt/plane/plane.env
Exec=./bin/docker-entrypoint-automation-consumer.sh
Image=artifacts.plane.so/makeplane/backend-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw

[Service]
Restart=always

---

# outbox-poller.container
[Unit]
Requires=plane-db.service plane-mq.service
After=plane-db.service plane-mq.service

[Container]
EnvironmentFile=/opt/plane/plane.env
Exec=./bin/docker-entrypoint-outbox-poller.sh
Image=artifacts.plane.so/makeplane/backend-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw

[Service]
Restart=always

---

# proxy.container
[Unit]
Requires=web.service api.service space.service admin.service live.service
After=web.service api.service space.service admin.service live.service

[Container]
EnvironmentFile=/opt/plane/plane.env
Image=artifacts.plane.so/makeplane/proxy-commercial:${APP_RELEASE_VERSION}
Network=systemd-plane-nw
PublishPort=8080:80
PublishPort=8443:443
Volume=/opt/plane/proxy/config:/config
Volume=/opt/plane/proxy/data:/data
Volume=/opt/plane/proxy/Caddyfile:/etc/caddy/Caddyfile

[Service]
Restart=always

---

# plane-nw.network
[Network]
Driver=bridge
