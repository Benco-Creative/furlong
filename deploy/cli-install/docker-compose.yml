# version: "3.8"

x-app-env: &app-env
  environment:
    - LISTEN_HTTP_PORT=${LISTEN_HTTP_PORT:-80}
    - WEB_URL=${WEB_URL:-http://localhost}
    - DEBUG=${DEBUG:-0}
    - SENTRY_DSN=${SENTRY_DSN:-""}
    - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT:-"production"}
    - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-}
    # Gunicorn Workers
    - GUNICORN_WORKERS=${GUNICORN_WORKERS:-2}
    #DB SETTINGS
    - PGHOST=${PGHOST:-plane-db}
    - PGDATABASE=${PGDATABASE:-plane}
    - POSTGRES_USER=${POSTGRES_USER:-plane}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-plane}
    - POSTGRES_DB=${POSTGRES_DB:-plane}
    - PGDATA=${PGDATA:-/var/lib/postgresql/data}
    - DATABASE_URL=${DATABASE_URL:-postgresql://plane:plane@plane-db/plane}
    # REDIS SETTINGS
    - REDIS_HOST=${REDIS_HOST:-plane-redis}
    - REDIS_PORT=${REDIS_PORT:-6379}
    - REDIS_URL=${REDIS_URL:-redis://plane-redis:6379/}
    # Application secret
    - SECRET_KEY=${SECRET_KEY:-60gp0byfz2dvffa45cxl20p1scy9xbpf6d8c5y0geejgkyp1b5}
    # DATA STORE SETTINGS
    - USE_MINIO=${USE_MINIO:-1}
    - AWS_REGION=${AWS_REGION:-""}
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-"access-key"}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-"secret-key"}
    - AWS_S3_ENDPOINT_URL=${AWS_S3_ENDPOINT_URL:-http://plane-minio:9000}
    - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME:-uploads}
    - MINIO_ROOT_USER=${MINIO_ROOT_USER:-"access-key"}
    - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-"secret-key"}
    - BUCKET_NAME=${BUCKET_NAME:-uploads}
    - FILE_SIZE_LIMIT=${FILE_SIZE_LIMIT:-5242880}

services:

  admin:
    <<: *app-env
    image: registry.plane.tools/plane/admin-enterprise:${APP_RELEASE_VERSION}
    restart: unless-stopped
    command:  node admin/server.js admin
    deploy:
      replicas: ${ADMIN_REPLICAS:-1}
    depends_on:
      - api
      - web

  web:
    <<: *app-env
    image: registry.plane.tools/plane/web-enterprise:${APP_RELEASE_VERSION}
    pull_policy: if_not_present
    restart: unless-stopped
    command: node web/server.js web
    deploy:
      replicas: ${WEB_REPLICAS:-1}
    depends_on:
      - api
      - worker

  space:
    <<: *app-env
    image: registry.plane.tools/plane/space-enterprise:${APP_RELEASE_VERSION}
    pull_policy: if_not_present
    restart: unless-stopped
    command: node space/server.js space
    deploy:
      replicas: ${SPACE_REPLICAS:-1}
    depends_on:
      - api
      - worker
      - web

  api:
    <<: *app-env
    image: registry.plane.tools/plane/backend-enterprise:${APP_RELEASE_VERSION}
    pull_policy: if_not_present
    restart: unless-stopped
    command: ./bin/takeoff
    deploy:
      replicas: ${API_REPLICAS:-1}
    volumes:
      - ${INSTALL_DIR}/logs/api:/code/plane/logs
    depends_on:
      - plane-db
      - plane-redis

  worker:
    <<: *app-env
    image: registry.plane.tools/plane/backend-enterprise:${APP_RELEASE_VERSION}
    pull_policy: if_not_present
    restart: unless-stopped
    command: ./bin/worker
    volumes:
      - ${INSTALL_DIR}/logs/worker:/code/plane/logs
    depends_on:
      - api
      - plane-db
      - plane-redis

  beat-worker:
    <<: *app-env
    image: registry.plane.tools/plane/backend-enterprise:${APP_RELEASE_VERSION}
    pull_policy: if_not_present
    restart: unless-stopped
    command: ./bin/beat
    volumes:
      - ${INSTALL_DIR}/logs/beat-worker:/code/plane/logs
    depends_on:
      - api
      - plane-db
      - plane-redis

  migrator:
    <<: *app-env
    image: registry.plane.tools/plane/backend-enterprise:${APP_RELEASE_VERSION}
    pull_policy: if_not_present
    restart: no
    command: >
      sh -c "python manage.py wait_for_db &&
           python manage.py migrate"
    volumes:
      - ${INSTALL_DIR}/logs/migrator:/code/plane/logs
    depends_on:
      - plane-db
      - plane-redis

  plane-db:
    <<: *app-env
    image: registry.plane.tools/plane/postgres:15.5-alpine
    pull_policy: if_not_present
    restart: unless-stopped
    command: postgres -c 'max_connections=1000'
    volumes:
      - ${INSTALL_DIR}/data/db:/var/lib/postgresql/data
  plane-redis:
    <<: *app-env
    image: registry.plane.tools/plane/redis:7.2.4-alpine
    pull_policy: if_not_present
    restart: unless-stopped
    volumes:
      - ${INSTALL_DIR}/data/redis:/data

  plane-minio:
    <<: *app-env
    image: registry.plane.tools/plane/minio:latest
    pull_policy: if_not_present
    restart: unless-stopped
    command: server /export --console-address ":9090"
    volumes:
      - ${INSTALL_DIR}/data/minio/uploads:/export
      - ${INSTALL_DIR}/data/minio/data:/data

  # Comment this if you already have a reverse proxy running
  proxy:
    <<: *app-env
    image: registry.plane.tools/plane/proxy-enterprise:${APP_RELEASE_VERSION}
    pull_policy: if_not_present
    restart: unless-stopped
    ports:
      - ${LISTEN_HTTP_PORT}:80
    depends_on:
      - web
      - api
      - space
