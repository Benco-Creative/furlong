name: Branch Build Enterprise

on:
  workflow_dispatch:
    inputs:
      arm64:
        description: "Build for ARM64 architecture"
        required: false
        default: false
        type: boolean
  push:
    branches:
      - master

env:
  TARGET_BRANCH: ${{ github.ref_name }}
  ARM64_BUILD: ${{ github.event.inputs.arm64 }}

jobs:
  branch_build_setup:
    name: Build Setup
    runs-on: ubuntu-20.04
    outputs:
      gh_branch_name: ${{ steps.set_env_variables.outputs.TARGET_BRANCH }}
      gh_buildx_driver: ${{ steps.set_env_variables.outputs.BUILDX_DRIVER }}
      gh_buildx_version: ${{ steps.set_env_variables.outputs.BUILDX_VERSION }}
      gh_buildx_platforms: ${{ steps.set_env_variables.outputs.BUILDX_PLATFORMS }}
      gh_buildx_endpoint: ${{ steps.set_env_variables.outputs.BUILDX_ENDPOINT }}
      build_web: ${{ steps.changed_files.outputs.web_any_changed }}
      build_admin: ${{ steps.changed_files.outputs.admin_any_changed }}
      build_space: ${{ steps.changed_files.outputs.space_any_changed }}
      build_live: ${{ steps.changed_files.outputs.live_any_changed }}
      build_apiserver: ${{ steps.changed_files.outputs.apiserver_any_changed }}
      build_proxy: ${{ steps.changed_files.outputs.proxy_any_changed }}
      build_monitor: ${{ steps.changed_files.outputs.monitor_any_changed }}
      artifact_upload_to_s3: ${{ steps.set_env_variables.outputs.artifact_upload_to_s3 }}
      artifact_s3_suffix: ${{ steps.set_env_variables.outputs.artifact_s3_suffix }}

      dh_img_web: ${{ steps.set_env_variables.outputs.DH_IMG_WEB }}
      dh_img_space: ${{ steps.set_env_variables.outputs.DH_IMG_SPACE }}
      dh_img_admin: ${{ steps.set_env_variables.outputs.DH_IMG_ADMIN }}
      dh_img_live: ${{ steps.set_env_variables.outputs.DH_IMG_LIVE }}
      dh_img_backend: ${{ steps.set_env_variables.outputs.DH_IMG_BACKEND }}
      dh_img_proxy: ${{ steps.set_env_variables.outputs.DH_IMG_PROXY }}
      dh_img_monitor: ${{ steps.set_env_variables.outputs.DH_IMG_MONITOR }}
      harbor_push: ${{ steps.set_env_variables.outputs.HARBOR_PUSH }}
      release_version: ${{ steps.set_env_variables.outputs.FLAT_RELEASE_VERSION }}

    steps:
      - id: set_env_variables
        name: Set Environment Variables
        run: |
          if [ "${{ env.ARM64_BUILD }}" == "true" ] || ([ "${{ github.event_name }}" == "release" ] && [ "${{ env.IS_PRERELEASE }}" != "true" ]); then
            echo "BUILDX_DRIVER=cloud" >> $GITHUB_OUTPUT
            echo "BUILDX_VERSION=lab:latest" >> $GITHUB_OUTPUT
            echo "BUILDX_PLATFORMS=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
            echo "BUILDX_ENDPOINT=makeplane/plane-dev" >> $GITHUB_OUTPUT
          else
            echo "BUILDX_DRIVER=docker-container" >> $GITHUB_OUTPUT
            echo "BUILDX_VERSION=latest" >> $GITHUB_OUTPUT
            echo "BUILDX_PLATFORMS=linux/amd64" >> $GITHUB_OUTPUT
            echo "BUILDX_ENDPOINT=" >> $GITHUB_OUTPUT
          fi
          BR_NAME=$( echo "${{ env.TARGET_BRANCH }}" |sed 's/[^a-zA-Z0-9.-]//g')
          echo "TARGET_BRANCH=$BR_NAME" >> $GITHUB_OUTPUT

          if [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            echo "artifact_upload_to_s3=true" >> $GITHUB_OUTPUT
            echo "artifact_s3_suffix=latest" >> $GITHUB_OUTPUT
          elif [ "${{ env.TARGET_BRANCH }}" == "preview" ] || [ "${{ env.TARGET_BRANCH }}" == "develop" ]; then
            echo "artifact_upload_to_s3=true" >> $GITHUB_OUTPUT
            echo "artifact_s3_suffix=${{ env.TARGET_BRANCH }}" >> $GITHUB_OUTPUT
          else
            echo "artifact_upload_to_s3=false" >> $GITHUB_OUTPUT
            echo "artifact_s3_suffix=$BR_NAME" >> $GITHUB_OUTPUT
          fi

          echo "DH_IMG_WEB=web-enterprise" >> $GITHUB_OUTPUT
          echo "DH_IMG_SPACE=space-enterprise" >> $GITHUB_OUTPUT
          echo "DH_IMG_ADMIN=admin-enterprise" >> $GITHUB_OUTPUT
          echo "DH_IMG_LIVE=live-enterprise" >> $GITHUB_OUTPUT
          echo "DH_IMG_BACKEND=backend-enterprise" >> $GITHUB_OUTPUT
          echo "DH_IMG_PROXY=proxy-enterprise" >> $GITHUB_OUTPUT
          echo "DH_IMG_MONITOR=monitor-enterprise" >> $GITHUB_OUTPUT
          echo "HARBOR_PUSH=true" >> $GITHUB_OUTPUT

      - id: checkout_files
        name: Checkout Files
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v42
        with:
          files_yaml: |
            apiserver:
              - apiserver/**
            proxy:
              - nginx/**
            admin:
              - admin/**
              - packages/**
              - "package.json"
              - "yarn.lock"
              - "tsconfig.json"
              - "turbo.json"
            space:
              - space/**
              - packages/**
              - "package.json"
              - "yarn.lock"
              - "tsconfig.json"
              - "turbo.json"
            web:
              - web/**
              - packages/**
              - "package.json"
              - "yarn.lock"
              - "tsconfig.json"
              - "turbo.json"
            live:
              - live/**
              - packages/**
              - 'package.json'
              - 'yarn.lock'
              - 'tsconfig.json'
              - 'turbo.json'
            monitor:
              - monitor/**

  branch_build_push_admin:
    if: ${{ needs.branch_build_setup.outputs.build_admin == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Admin Docker Image
    runs-on: ubuntu-20.04
    needs: [branch_build_setup]
    steps:
      - id: checkout_files
        name: Checkout Files
        uses: actions/checkout@v4
      - name: Admin Build and Push
        uses: ./.github/actions/build-push-action
        with:
          docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          harbor-push: ${{ needs.branch_build_setup.outputs.harbor_push }}
          harbor-username: ${{ secrets.HARBOR_USERNAME }}
          harbor-token: ${{ secrets.HARBOR_TOKEN }}
          harbor-registry: ${{ vars.HARBOR_REGISTRY }}
          harbor-project: ${{ vars.HARBOR_PROJECT }}
          docker-image-owner: makeplane
          docker-image-name: ${{ needs.branch_build_setup.outputs.dh_img_admin }}
          build-context: .
          dockerfile-path: ./admin/Dockerfile.admin
          buildx-driver: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
          buildx-version: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
          buildx-platforms: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
          buildx-endpoint: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}

  branch_build_push_web:
    if: ${{ needs.branch_build_setup.outputs.build_web == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Web Docker Image
    runs-on: ubuntu-20.04
    needs: [branch_build_setup]
    steps:
      - id: checkout_files
        name: Checkout Files
        uses: actions/checkout@v4
      - name: Web Build and Push
        uses: ./.github/actions/build-push-action
        with:
          docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          harbor-push: ${{ needs.branch_build_setup.outputs.harbor_push }}
          harbor-username: ${{ secrets.HARBOR_USERNAME }}
          harbor-token: ${{ secrets.HARBOR_TOKEN }}
          harbor-registry: ${{ vars.HARBOR_REGISTRY }}
          harbor-project: ${{ vars.HARBOR_PROJECT }}
          docker-image-owner: makeplane
          docker-image-name: ${{ needs.branch_build_setup.outputs.dh_img_web }}
          build-context: .
          dockerfile-path: ./web/Dockerfile.web
          buildx-driver: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
          buildx-version: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
          buildx-platforms: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
          buildx-endpoint: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}

  branch_build_push_space:
    if: ${{ needs.branch_build_setup.outputs.build_space == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Space Docker Image
    runs-on: ubuntu-20.04
    needs: [branch_build_setup]
    steps:
      - id: checkout_files
        name: Checkout Files
        uses: actions/checkout@v4
      - name: Space Build and Push
        uses: ./.github/actions/build-push-action
        with:
          docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          harbor-push: ${{ needs.branch_build_setup.outputs.harbor_push }}
          harbor-username: ${{ secrets.HARBOR_USERNAME }}
          harbor-token: ${{ secrets.HARBOR_TOKEN }}
          harbor-registry: ${{ vars.HARBOR_REGISTRY }}
          harbor-project: ${{ vars.HARBOR_PROJECT }}
          docker-image-owner: makeplane
          docker-image-name: ${{ needs.branch_build_setup.outputs.dh_img_space }}
          build-context: .
          dockerfile-path: ./space/Dockerfile.space
          buildx-driver: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
          buildx-version: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
          buildx-platforms: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
          buildx-endpoint: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}

  branch_build_push_live:
    if: ${{ needs.branch_build_setup.outputs.build_live == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Live Collaboration Docker Image
    runs-on: ubuntu-20.04
    needs: [branch_build_setup]
    steps:
      - id: checkout_files
        name: Checkout Files
        uses: actions/checkout@v4
      - name: Live Build and Push
        uses: ./.github/actions/build-push-action
        with:
          docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          harbor-push: ${{ needs.branch_build_setup.outputs.harbor_push }}
          harbor-username: ${{ secrets.HARBOR_USERNAME }}
          harbor-token: ${{ secrets.HARBOR_TOKEN }}
          harbor-registry: ${{ vars.HARBOR_REGISTRY }}
          harbor-project: ${{ vars.HARBOR_PROJECT }}
          docker-image-owner: makeplane
          docker-image-name: ${{ needs.branch_build_setup.outputs.dh_img_live }}
          build-context: .
          dockerfile-path: ./live/Dockerfile.live
          buildx-driver: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
          buildx-version: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
          buildx-platforms: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
          buildx-endpoint: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}

  branch_build_push_apiserver:
    if: ${{ needs.branch_build_setup.outputs.build_apiserver == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push API Server Docker Image
    runs-on: ubuntu-20.04
    needs: [branch_build_setup]
    steps:
      - id: checkout_files
        name: Checkout Files
        uses: actions/checkout@v4
      - name: Backend Build and Push
        uses: ./.github/actions/build-push-action
        with:
          docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          harbor-push: ${{ needs.branch_build_setup.outputs.harbor_push }}
          harbor-username: ${{ secrets.HARBOR_USERNAME }}
          harbor-token: ${{ secrets.HARBOR_TOKEN }}
          harbor-registry: ${{ vars.HARBOR_REGISTRY }}
          harbor-project: ${{ vars.HARBOR_PROJECT }}
          docker-image-owner: makeplane
          docker-image-name: ${{ needs.branch_build_setup.outputs.dh_img_backend }}
          build-context: ./apiserver
          dockerfile-path: ./apiserver/Dockerfile.api
          buildx-driver: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
          buildx-version: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
          buildx-platforms: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
          buildx-endpoint: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}

  branch_build_push_proxy:
    if: ${{ needs.branch_build_setup.outputs.build_proxy == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Proxy Docker Image
    runs-on: ubuntu-20.04
    needs: [branch_build_setup]
    steps:
      - id: checkout_files
        name: Checkout Files
        uses: actions/checkout@v4
      - name: Proxy Build and Push
        uses: ./.github/actions/build-push-action
        with:
          docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          harbor-push: ${{ needs.branch_build_setup.outputs.harbor_push }}
          harbor-username: ${{ secrets.HARBOR_USERNAME }}
          harbor-token: ${{ secrets.HARBOR_TOKEN }}
          harbor-registry: ${{ vars.HARBOR_REGISTRY }}
          harbor-project: ${{ vars.HARBOR_PROJECT }}
          docker-image-owner: makeplane
          docker-image-name: ${{ needs.branch_build_setup.outputs.dh_img_proxy }}
          build-context: ./nginx
          dockerfile-path: ./nginx/Dockerfile
          buildx-driver: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
          buildx-version: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
          buildx-platforms: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
          buildx-endpoint: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}

  branch_build_push_monitor:
    if: ${{ needs.branch_build_setup.outputs.build_monitor == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Monitor Docker Image
    runs-on: ubuntu-20.04
    needs: [branch_build_setup]
    steps:
      - id: checkout_files
        name: Checkout Files
        uses: actions/checkout@v4
      - name: Generate Keypair
        run: |
          if [ "${{ env.TARGET_BRANCH }}" == "master" ]; then 
            openssl genrsa -out private_key.pem 2048
          else
            echo "${{ secrets.DEFAULT_PRIME_PRIVATE_KEY }}" > private_key.pem
          fi
          openssl rsa -in private_key.pem -pubout -out public_key.pem
          cat public_key.pem

          # Generating the private key env for the generated keys
          PRIVATE_KEY=$(cat private_key.pem | base64 -w 0)
          echo "PRIVATE_KEY=${PRIVATE_KEY}" >> $GITHUB_ENV

      - name: Monitor Build and Push
        uses: ./.github/actions/build-push-action
        with:
          docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          harbor-push: ${{ needs.branch_build_setup.outputs.harbor_push }}
          harbor-username: ${{ secrets.HARBOR_USERNAME }}
          harbor-token: ${{ secrets.HARBOR_TOKEN }}
          harbor-registry: ${{ vars.HARBOR_REGISTRY }}
          harbor-project: ${{ vars.HARBOR_PROJECT }}
          docker-image-owner: makeplane
          docker-image-name: ${{ needs.branch_build_setup.outputs.dh_img_monitor }}
          build-context: ./monitor
          dockerfile-path: ./monitor/Dockerfile
          buildx-driver: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
          buildx-version: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
          buildx-platforms: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
          buildx-endpoint: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}
          build-args: |
            PRIVATE_KEY=${{ env.PRIVATE_KEY }}

  upload_artifacts_s3:
    if: ${{ needs.branch_build_setup.outputs.artifact_upload_to_s3 == 'true' }}
    name: Upload artifacts to S3 Bucket
    runs-on: ubuntu-20.04
    needs: [branch_build_setup]
    container:
      image: docker:20.10.7
      credentials:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    env:
      ARTIFACT_SUFFIX: ${{ needs.branch_build_setup.outputs.artifact_s3_suffix }}
      AWS_ACCESS_KEY_ID: ${{ secrets.SELF_HOST_BUCKET_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SELF_HOST_BUCKET_SECRET_KEY }}
    steps:
      - id: checkout_files
        name: Checkout Files
        uses: actions/checkout@v4

      - name: Upload artifacts
        run: |
          apk update
          apk add --no-cache aws-cli

          mkdir -p ~/${{ env.ARTIFACT_SUFFIX }}

          cp deploy/cli-install/variables.env ~/${{ env.ARTIFACT_SUFFIX }}/variables.env
          cp deploy/cli-install/Caddyfile ~/${{ env.ARTIFACT_SUFFIX }}/Caddyfile
          sed -e 's@${APP_RELEASE_VERSION}@'${{ env.ARTIFACT_SUFFIX }}'@' deploy/cli-install/docker-compose.yml > ~/${{ env.ARTIFACT_SUFFIX }}/docker-compose.yml
          sed -e 's@${APP_RELEASE_VERSION}@'${{ env.ARTIFACT_SUFFIX }}'@' deploy/cli-install/docker-compose-caddy.yml > ~/${{ env.ARTIFACT_SUFFIX }}/docker-compose-caddy.yml

          aws s3 cp ~/${{ env.ARTIFACT_SUFFIX }} s3://${{ vars.SELF_HOST_BUCKET_NAME }}/plane-enterprise/${{ env.ARTIFACT_SUFFIX }} --recursive
