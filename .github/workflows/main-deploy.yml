name: Build & Deploy on main

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
      owner: ${{ steps.vars.outputs.owner }}

    steps:
      - uses: actions/checkout@v4

      - name: Compute image tag
        id: meta
        run: echo "tag=main-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Lowercase owner
        id: vars
        run: echo "owner=$(echo $GITHUB_REPOSITORY_OWNER | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push AIO image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deployments/aio/community/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ghcr.io/${{ steps.vars.outputs.owner }}/furlong-aio:${{ steps.meta.outputs.tag }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            cd /opt/plane/plane-app
            
            # Stop all existing plane containers
            echo "Stopping existing Plane containers..."
            docker-compose down || true
            
            # Force stop any remaining containers using ports 80/443
            echo "Force stopping containers using ports 80/443..."
            docker stop $(docker ps -q --filter "publish=80") 2>/dev/null || true
            docker stop $(docker ps -q --filter "publish=443") 2>/dev/null || true
            
            # Remove any stopped containers
            echo "Cleaning up stopped containers..."
            docker container prune -f || true
            
            # Pull the AIO image
            echo "Pulling new AIO image..."
            docker pull ghcr.io/${{ needs.build.outputs.owner }}/furlong-aio:${{ needs.build.outputs.tag }}
            
            # Create backup of current plane.env
            echo "Backing up current configuration..."
            cp plane.env plane.env.backup.$(date +%Y%m%d_%H%M%S) || true
            
            # Run the AIO container with proper environment variables
            echo "Starting AIO container..."
            docker run -d \
              --name furlong-aio \
              --restart unless-stopped \
              --network plane-app_default \
              -p 80:80 \
              -p 443:443 \
              -e DOMAIN_NAME=furlong.madeitlookeasy.com \
              -e DATABASE_URL=postgresql://plane:plane@plane-app-plane-db-1:5432/plane \
              -e REDIS_URL=redis://plane-app-plane-redis-1:6379 \
              -e AMQP_URL=amqp://plane:plane@plane-app-plane-mq-1:5672/plane \
              -e AWS_REGION=us-east-1 \
              -e AWS_ACCESS_KEY_ID=access-key \
              -e AWS_SECRET_ACCESS_KEY=secret-key \
              -e AWS_S3_BUCKET_NAME=uploads \
              -e SECRET_KEY=60gp0byfz2dvffa45cxl20p1scy9xbpf6d8c5y0geejgkyp1b5 \
              -e SITE_ADDRESS=:80 \
              -e FILE_SIZE_LIMIT=5242880 \
              -e APP_PROTOCOL=https \
              -v plane-app_pgdata:/app/data/postgres \
              -v plane-app_uploads:/app/data/uploads \
              -v plane-app_logs_api:/app/logs \
              ghcr.io/${{ needs.build.outputs.owner }}/furlong-aio:${{ needs.build.outputs.tag }}
            
            echo "Deployment completed successfully!"